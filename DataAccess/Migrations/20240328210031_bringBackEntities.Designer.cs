// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240328210031_bringBackEntities")]
    partial class bringBackEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ab97c50-052f-44af-8516-3a27e4ec3d72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7a71802-7e59-4e96-a7b3-be5e4ff1d020",
                            Email = "admin1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDB7O4XKD+EfpzgLe/puV7LtYvFSdnvpuwokldJheQPsSl37zdwNHGfxOOPIKxhYew==",
                            PersonId = 1,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisteredDate = new DateTime(2024, 3, 28, 21, 0, 30, 873, DateTimeKind.Utc).AddTicks(9304),
                            SecurityStamp = "33d31421-c93c-4cfd-a471-709545eb89fc",
                            UserName = "admin1@example.com"
                        },
                        new
                        {
                            Id = "faa2cd95-a59c-4127-8f54-916deb38b612",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e41a1f1-43eb-4a5d-93dc-c31f7e9291f6",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFq7UdBEEz6lnoV16GYy3+Z2oGJ3Yh56XseiyWsdmSXPBtGrIMQfLxkUsJoMXZjbUQ==",
                            PersonId = 2,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisteredDate = new DateTime(2024, 3, 28, 21, 0, 30, 914, DateTimeKind.Utc).AddTicks(5444),
                            SecurityStamp = "b3e91b39-4aea-4efa-8c9c-3a03deae0c19",
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "ea4cbaeb-0869-493c-b80c-372a32b05539",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae0418de-3cc6-45fa-9b11-b5ddd9bb8177",
                            Email = "client1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@EXAMPLE.COM",
                            NormalizedUserName = "client1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIbanE4MkyLrOr96QOPPOGyEYTVldUaPTB2iwy9wEY9lDhruS3pfHYkKAohzFJP5A==",
                            PersonId = 3,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisteredDate = new DateTime(2024, 3, 28, 21, 0, 30, 954, DateTimeKind.Utc).AddTicks(6978),
                            SecurityStamp = "62d2f499-b71f-4d93-b457-d3fecf49b82a",
                            UserName = "client1@example.com"
                        },
                        new
                        {
                            Id = "55f7cc01-0e49-4cb0-bff8-aced0c399819",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59bbb5fb-1121-48b7-b51a-70f05a2b5a44",
                            Email = "client2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT12@EXAMPLE.COM",
                            NormalizedUserName = "CLIENT12@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4AEPkpZr+wR4bD4rfABEeqlkViVrirEqi47YNliVsQH1k/IJESrVn4ZS0LwQDEKQ==",
                            PersonId = 4,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisteredDate = new DateTime(2024, 3, 28, 21, 0, 30, 996, DateTimeKind.Utc).AddTicks(8526),
                            SecurityStamp = "93db6beb-8421-4c0e-865d-40ecf989d487",
                            UserName = "client2@example.com"
                        },
                        new
                        {
                            Id = "064b6a0b-8c25-4710-8fc3-95e2d59be04e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85933212-8dfd-418b-963a-41f62218ab10",
                            Email = "client3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@EXAMPLE.COM",
                            NormalizedUserName = "CLIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAhS5elXU3aG5c8Vovif+EDgzjpXgS5NMthPryMgNPnUswwTrK1B7JhRLqiomeeHHg==",
                            PersonId = 5,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisteredDate = new DateTime(2024, 3, 28, 21, 0, 31, 38, DateTimeKind.Utc).AddTicks(3875),
                            SecurityStamp = "b1dd6080-b351-4241-88d1-9a5de84d28e1",
                            UserName = "client3@example.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentExerciseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRepetitions")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("RestAfterExerciseInMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("RestBetweenSetsInMinutes")
                        .HasColumnType("int");

                    b.Property<bool?>("SuccessfulyPerformed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDetailId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("AppointmentExerciseDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentServiceTypeDurationCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeDurationCostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceTypeDurationCostId", "AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentServiceTypeDurationCosts");
                });

            modelBuilder.Entity("DataAccess.Entities.BlogPost", b =>
                {
                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("HTMLContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("KeywordsString")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Slug");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DataAccess.Entities.BookedAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentBookedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentServiceTypeDurationCostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("OneDayReminderSent")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("SevenDaysReminderSent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentServiceTypeDurationCostId");

                    b.HasIndex("PersonId");

                    b.ToTable("BookedAppointments");
                });

            modelBuilder.Entity("DataAccess.Entities.ClientNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ClientNotes");
                });

            modelBuilder.Entity("DataAccess.Entities.DurationCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DurationCosts");
                });

            modelBuilder.Entity("DataAccess.Entities.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shoulder Press"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deadlift"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pull Up"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Push Up"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sit Up"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Plank"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lunges"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Burpees"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mountain Climbers"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Jumping Jacks"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Squat Jumps"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Box Jumps"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Wall Balls"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kettlebell Swings"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Thrusters"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Power Cleans"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Snatches"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Clean and Jerk"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Overhead Squat"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Front Squat"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Back Squat"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Sumo Deadlift High Pull"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Turkish Get Up"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Handstand Push Up"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Muscle Up"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Toes to Bar"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Double Unders"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Skipping Rope"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Admin",
                            LastName = "One",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Admin",
                            LastName = "Two",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Client",
                            LastName = "One",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Client",
                            LastName = "Two",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Client",
                            LastName = "Three",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#14746F");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.ServiceTypeDurationCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationCostId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DurationCostId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceTypeDurationCosts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8036F52A-701F-4AA4-8639-D9C8123FD8C6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "C7D20194-9C7E-40DB-9C63-F71D20116529",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4ab97c50-052f-44af-8516-3a27e4ec3d72",
                            RoleId = "8036F52A-701F-4AA4-8639-D9C8123FD8C6"
                        },
                        new
                        {
                            UserId = "faa2cd95-a59c-4127-8f54-916deb38b612",
                            RoleId = "8036F52A-701F-4AA4-8639-D9C8123FD8C6"
                        },
                        new
                        {
                            UserId = "ea4cbaeb-0869-493c-b80c-372a32b05539",
                            RoleId = "C7D20194-9C7E-40DB-9C63-F71D20116529"
                        },
                        new
                        {
                            UserId = "55f7cc01-0e49-4cb0-bff8-aced0c399819",
                            RoleId = "C7D20194-9C7E-40DB-9C63-F71D20116529"
                        },
                        new
                        {
                            UserId = "064b6a0b-8c25-4710-8fc3-95e2d59be04e",
                            RoleId = "C7D20194-9C7E-40DB-9C63-F71D20116529"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.ApplicationUser", b =>
                {
                    b.HasOne("DataAccess.Entities.Person", "Person")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("DataAccess.Entities.ApplicationUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Appointment", "Appointment")
                        .WithOne("AppointmentDetail")
                        .HasForeignKey("DataAccess.Entities.AppointmentDetail", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentExerciseDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.AppointmentDetail", "AppointmentDetail")
                        .WithMany("AppointmentExerciseDetails")
                        .HasForeignKey("AppointmentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentDetail");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentServiceTypeDurationCost", b =>
                {
                    b.HasOne("DataAccess.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServiceTypeDurationCosts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ServiceTypeDurationCost", "ServiceTypeDurationCost")
                        .WithMany("AppointmentServiceTypeDurationCosts")
                        .HasForeignKey("ServiceTypeDurationCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ServiceTypeDurationCost");
                });

            modelBuilder.Entity("DataAccess.Entities.BookedAppointment", b =>
                {
                    b.HasOne("DataAccess.Entities.AppointmentServiceTypeDurationCost", "AppointmentServiceTypeDurationCost")
                        .WithMany("BookedAppointments")
                        .HasForeignKey("AppointmentServiceTypeDurationCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Person", "Person")
                        .WithMany("BookedAppointments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentServiceTypeDurationCost");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.ClientNote", b =>
                {
                    b.HasOne("DataAccess.Entities.Person", "Person")
                        .WithMany("ClientNotes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.ServiceTypeDurationCost", b =>
                {
                    b.HasOne("DataAccess.Entities.DurationCost", "DurationCost")
                        .WithMany("ServiceTypeDurationCosts")
                        .HasForeignKey("DurationCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ServiceType", "ServiceType")
                        .WithMany("ServiceTypeDurationCosts")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationCost");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentDetail");

                    b.Navigation("AppointmentServiceTypeDurationCosts");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentDetail", b =>
                {
                    b.Navigation("AppointmentExerciseDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.AppointmentServiceTypeDurationCost", b =>
                {
                    b.Navigation("BookedAppointments");
                });

            modelBuilder.Entity("DataAccess.Entities.DurationCost", b =>
                {
                    b.Navigation("ServiceTypeDurationCosts");
                });

            modelBuilder.Entity("DataAccess.Entities.Person", b =>
                {
                    b.Navigation("ApplicationUser")
                        .IsRequired();

                    b.Navigation("BookedAppointments");

                    b.Navigation("ClientNotes");
                });

            modelBuilder.Entity("DataAccess.Entities.ServiceType", b =>
                {
                    b.Navigation("ServiceTypeDurationCosts");
                });

            modelBuilder.Entity("DataAccess.Entities.ServiceTypeDurationCost", b =>
                {
                    b.Navigation("AppointmentServiceTypeDurationCosts");
                });
#pragma warning restore 612, 618
        }
    }
}
